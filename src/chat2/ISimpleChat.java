/*
 * Курс DEV-J130. Задание №4. Основы многопоточного программирования.
 */
package chat2;

import java.net.Socket;

/**
 *
 * @author Nikolai Shilenko
 */

/**
 ** Простой чат для двух собеседников. Реализация этого интерфейса должна
 * отличаться следующими особенностями:
 * <ol>
 * <li>класс реализации может работать в режиме сервера или клиента (режим
 * работы задаётся пользователем при старте приложения);</li>
 * <li>входящие сообщения, исходящие сообщения работают независимо друг от друга
 * в разных потоках;</li>
 * <li>при выходе из сеанса одной из сторон, второй стороне обязательно
 * передаётся соответствующее сообщение.</li>
 * </ol>
 *
 * Приложение может быть реализовано на основе использования стеков протоколов
 * UDP/IP или TCP/IP (по выбору программиста).
 */
public interface ISimpleChat extends AutoCloseable {

    /**
     * Запуск приложения в режиме клиента.
     *
     * @throws ChatException выбрасывается в случае общей ошибки в работе
     * приложения, например, в случае невозможности открыть соединение с
     * сервером.
     */
    void client() throws ChatException;

    /**
     * Запуск приложения в режиме сервера.
     *
     * @throws ChatException выбрасывается в случае общей ошибки в работе
     * приложения, например, в случае невозможности занять стандартный порт
     * сервера.
     */
    void server() throws ChatException;

    /**
     * Метод печатает принятое сообщение.
     *
     * @return @throws ChatException выбрасывается в случае общей ошибки в
     * работе приложения.
     */
    void printMessage() throws ChatException;

    /**
     * Метод отправляет сообщение.
     *
     * @throws ChatException выбрасывается в случае общей ошибки в работе
     * приложения.
     */
    void sendMessage() throws ChatException;

    /**
     * Метод закрывает открытые сокеты.
     *
     * @throws ChatException выбрасывается в случае общей ошибки в работе
     * приложения.
     */
    @Override
    public void close() throws ChatException;
}
